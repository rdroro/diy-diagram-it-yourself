#!/usr/bin/python

"""
main program to transform DIY language in diagramm

"""

import sys
import getopt
from os import path, environ, pardir
from time import time
import codecs
import exception
from parser import Parser
from interpretor import Interpretor


VERSION = '0.1.0Alpha'
PROGRAM_DIR = ""


def usage():
	print ''
	print 'Usage: diy [-v|--version] [-h|--help] -i path_to_diy_file [<ARGS>]:'
	print ''
	print '\t-h, --help \tDisplay this help'
	print '\t-v, --version \tprint diy version'
	print '\t-i, --input= \tpath to input file'
	print ''
	print 'Available ARGS'
	print '\t-o, --output= \tpath name for output svg file. By default ./diagram.svg'
	print ''
	return

"""
Simple function to add content into the file.
delete all previous content
@param filePath string path to the file
@param content string content to write
"""
def writeFile(filePath, content):
	tmp = codecs.open(filePath, 'w', "utf-8")
	tmp.write(content)
	tmp.close()
	return

def printError(msg, exit_code):
	print "[ERROR] "+msg
	sys.exit(exit_code)


def start(input_file, output_file):

	if not path.exists(input_file):
		usage()
		printError("Input file does not exist: "+input_file)
		sys.exit(110)

	markdown = codecs.open(input_file, 'r', 'utf-8')

	stats = ""

	try:
		json = Parser.parse(markdown.read().encode("utf-8"))

		interpretor = Interpretor(json, PROGRAM_DIR+"/lib")
		result = interpretor.generate()

		stats = result['stats']
		document = result['diy']
		writeFile(output_file, document)
		markdown.close()
	# except exception.NotJSONException as e:
	# 	printError("JSON in input is not valid", 3001)
	except exception.MalFomattedPositionException as e:
		printError("Mal Formatted Position: "+e.__str__(), 3002)
	except exception.ElementNotFoundException as e:
		printError('Element not found in lib: '+e.__str__(), 3003)
	except exception.NameNotFoundException as e:
		printError("Fail to retrieve linked element: "+e.__str__(), 3004)
	except exception.NoElementFoundExeception:
		printError("Your input file does not contain any elements", 3005)
	except exception.NotIntegerValueException as e:
		printError("Position must be integer value: "+e.__str__(), 3006)
	# # except Exception as e: 
	# # 	print e
	# 	printError('Unknow', 2000)

	return stats


def printStats(stats):
	print " --------------------------------------- "
	print "|               Stats                   |"
	print " --------------------------------------- "
	for key, value in stats.iteritems():
		print "|\t"+key+"\t|\t"+value.__str__()+"\t|"
		print " --------------------------------------- "


def main():
	start_time = time()
	argv = sys.argv
	argv = argv[1:]
	if len(argv) < 1:
		print '[ERROR] diy needs one parameter at least'
		usage()
		sys.exit(100)


	output_file = "diagram.svg"
	jsoninput = False
	try:
		opts, args = getopt.getopt(argv, ":hi:vo:", ['help', 'version', 'output=', 'input='])
	except getopt.GetoptError as err:
		print ''
		print err
		usage()
		sys.exit(2)

	for opt, arg in opts:
		if opt in ('-h', '--help'):
			usage()
			sys.exit(0)

		elif opt in ('-v', '--version'):
			print 'Diy '+VERSION
			sys.exit(0)

		elif opt in ('-o', '--output'):
			output_file = arg

		elif opt in ('-i', '--input'):
			input_file = arg
			INPUT = arg

		else:
			usage()
			sys.exit(9000)
	
	stats = start(input_file, output_file)
	end_time = time()
	during_time = end_time - start_time

	print "Diagram generated in "+str(during_time)+" seconds"
	printStats(stats)



if __name__ == "__main__":
	# Initialize src directory and PROGRAM_DIR
	srcdir = path.dirname(sys.argv[0])
	sys.path.append(srcdir)
	PROGRAM_DIR = path.abspath(path.join(srcdir, pardir))
	main()
