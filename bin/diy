#!/usr/bin/python
# -*- coding: utf8 -*-

"""
main program to transform DIY language in diagramm

"""

import sys
import getopt
from os import path, environ, pardir
from time import time
import codecs
import exception
from parser import Parser
from interpretor import Interpretor


VERSION = '0.1.0Alpha'
PROGRAM_DIR = ""


def usage():
    """
    Display command helper to standard output
    """
    print ''
    print 'Usage: diy [-v|--version] [-h|--help] -i path_to_diy_file [<ARGS>]:'
    print ''
    print '\t-h, --help \tDisplay this help'
    print '\t-v, --version \tprint diy version'
    print '\t-i, --input= \tpath to input file'
    print ''
    print 'Available ARGS'
    print '\t-o, --output= \tpath name for output svg file. By default ./diagram.svg'
    print ''
    return


def writeFile(filePath, content):
    """
    Simple function to add content into the file.
    delete all previous content
    @param filePath string path to the file
    @param content string content to write
    """
    tmp = codecs.open(filePath, 'w', "utf-8")
    tmp.write(content)
    tmp.close()
    return


def printError(msg, exit_code):
    """
    Function to display an error and exit program

    Args:
        msg: A string to display
        exit_code: An integer. sys.exit(exit_code)
    """
    print "[ERROR] "+msg
    sys.exit(exit_code)


def start(input_file, output_file, jsoninput):
    """
    Start
    """
    print "JSON : " + jsoninput.__str__()
    if not path.exists(input_file):
        usage()
        printError("Input file does not exist: "+input_file)
        sys.exit(110)

    markdown_file = codecs.open(input_file, 'r', 'utf-8')
    markdown_content = markdown_file.read()

    stats = ""

    try:
        if jsoninput is True:
            json = Parser.parse_json(markdown_content)
        else:
            json = Parser.parse_markdown(markdown_content)

        # for dic in json:
        #     for key, value in dic.iteritems():
        #         print key
        #         print "v"
        #         print type(key)
        #         print value
        #         print "v"
        #         print type(value)

        interpretor = Interpretor(json, PROGRAM_DIR+"/lib")
        result = interpretor.generate()

        stats = result['stats']
        document = result['diy']
        writeFile(output_file, document)
        markdown_file.close()
    # except exception.NotJSONException as e:
    #     printError("JSON in input is not valid", 3001)
    except exception.MalFomattedPositionException as e:
        printError("Mal Formatted Position: "+e.__str__(), 3002)
    except exception.ElementNotFoundException as e:
        printError('Element not found in lib: '+e.__str__(), 3003)
    except exception.NameNotFoundException as e:
        printError("Fail to retrieve linked element: "+e.__str__(), 3004)
    except exception.NoElementFoundExeception:
        printError("Your input file does not contain any elements", 3005)
    except exception.NotIntegerValueException as e:
        printError("Position must be integer value: "+e.__str__(), 3006)

    return stats


def printStats(stats):
    """
    Display some statistics as number of linkd and elements
    """
    print " --------------------------------------- "
    print "|               Stats                   |"
    print " --------------------------------------- "
    for key, value in stats.iteritems():
        print "|\t"+key+"\t|\t"+value.__str__()+"\t|"
        print " --------------------------------------- "


def main():
    """
    The Main function of program. Manage :
    * Script arguments
    * Call start()
    """
    start_time = time()
    # argv is a list containing ["Script absolute path", (arguments)+]
    argv = sys.argv
    # argv now containing [ (arguments)+]
    argv = argv[1:]
    if len(argv) < 1:
        print '[ERROR] diy needs one parameter at least'
        usage()
        sys.exit(100)

    output_name_file = "diagram.svg"
    jsoninput = False
    inputIsPresent = False

    # Manage script arguments
    try:
        # opts is a list of  tuples. Each tuple represents (argument, (value)*)
        opts, args = getopt.getopt(argv, "hvi:o:", ['help', 'version', 'input=', 'output=', 'json-input'])
    except getopt.GetoptError as err:
        print ''
        print err
        usage()
        sys.exit(2)

    for opt, arg in opts:
        # Display usage of program
        if opt in ('-h', '--help'):
            usage()
            sys.exit(0)

        # Show the current program version
        elif opt in ('-v', '--version'):
            print 'Diy '+VERSION
            sys.exit(0)

        # To specify output file name
        elif opt in ('-o', '--output'):
            output_name_file = arg

        # Specify input file. Required argument
        elif opt in ('-i', '--input'):
            input_file = arg
            inputIsPresent = True

        # Specify if input is directly in json format
        elif opt in ('--json-input'):
            jsoninput = True

        else:
            usage()
            sys.exit(9000)

    if inputIsPresent is False:
        print "-i argument is Required"
        usage()
        sys.exit(89)

    stats = start(input_file, output_name_file, jsoninput)
    end_time = time()
    during_time = end_time - start_time

    print "Diagram generated in "+str(during_time)+" seconds"
    printStats(stats)


if __name__ == "__main__":
    # Initialize src directory and PROGRAM_DIR
    srcdir = path.dirname(sys.argv[0])
    sys.path.append(srcdir)
    PROGRAM_DIR = path.abspath(path.join(srcdir, pardir))
    main()
